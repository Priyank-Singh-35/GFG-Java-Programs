/*
Given an array arr[] of N positive elements. The task is to find the Maximum AND Value generated by any pair(arri, arrj) from the array such that i != j.
Note: AND is bitwise '&' operator.

Example 1:
Input: 
N = 4
arr[] = {4, 8, 12, 16}
Output: 8
Explanation:
Pair (8,12) has the Maximum AND Value 8.

Example 2:
Input:
N = 4
arr[] = {4, 8, 16, 2}
Output: 0
Explanation: Any two pairs of the array has 
Maximum AND Value 0.

Your Task: 
You don't need to read input or print anything. Your task is to complete the function maxAND() which takes the array elements and N (size of the array) as input parameters and returns the maximum AND value generated by any pair in the array. 

Expected Time Complexity: O(N * log M), where M is the maximum element of the array.
Expected Auxiliary Space: O(1).

Constraints:
1 <= N <= 105
1 <= arr[i] <= 105
*/

// Solution-
class Solution {
    
    // Function to find the maximum AND value of any pair in the array
    public static int maxAND(int arr[], int N) {
        int result = 0; // Initialize result to 0

        // Iterate over bit positions from 31 to 0
        // This assumes that the integers are 32-bit
        for (int bit = 31; bit >= 0; bit--) {
            // Check if there are at least two numbers in the array
            // that have the current 'result' and the current bit set
            int count = countPairsWithGivenBitSet(arr, N, result | (1 << bit));
            
            // If at least two numbers have this bit set, update 'result' to include this bit
            if (count >= 2) {
                result |= (1 << bit);
            }
        }
        
        return result; // Return the maximum AND value
    }

    // Helper function to count how many numbers in the array have all bits in 'bitMask' set
    private static int countPairsWithGivenBitSet(int[] arr, int N, int bitMask) {
        int count = 0; // Initialize count to 0

        // Count numbers that have all bits in 'bitMask' set
        for (int num : arr) {
            if ((num & bitMask) == bitMask) {
                count++;
            }
        }
        
        return count; // Return the count of numbers with the given bit set
    }
}
